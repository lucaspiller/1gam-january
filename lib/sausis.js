// Generated by CoffeeScript 1.4.0
var $, initGame;

$ = Zepto;

$(function() {
  return initGame();
});

initGame = function() {
  var COLOURS, INITIAL_CHARACTER_COLUMN, INITIAL_COLUMNS, INITIAL_ROWS, MAX_ROWS, NEW_ROW_INTERVAL, addRow, addRowOrRestartGame, alive, balls, board, characterBalls, characterColumn, column, columnIndex, columns, countRows, findAndDestroyBalls, moveCharacterToColumn, pullBall, pushBall, rowIndex, rows, _i, _j, _ref, _ref1;
  $('#sausis .board').remove();
  board = $('<div/>');
  board.addClass('board');
  $('#sausis').append(board);
  alive = true;
  INITIAL_COLUMNS = 7;
  columns = INITIAL_COLUMNS;
  balls = [];
  for (columnIndex = _i = 0, _ref = INITIAL_COLUMNS - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; columnIndex = 0 <= _ref ? ++_i : --_i) {
    column = $('<div />');
    column.addClass('column');
    column.data('x', columnIndex);
    board.append(column);
    balls.push([]);
  }
  INITIAL_ROWS = 4;
  MAX_ROWS = 12;
  rows = 0;
  COLOURS = ['red', 'blue', 'green'];
  countRows = function() {
    var maxBalls, _j, _len;
    maxBalls = 0;
    for (_j = 0, _len = balls.length; _j < _len; _j++) {
      column = balls[_j];
      if (column.length > maxBalls) {
        maxBalls = column.length;
      }
    }
    return maxBalls;
  };
  addRow = function() {
    var ball, colour, rowIndex, _j, _ref1, _results;
    rowIndex = rows++;
    if (countRows() >= MAX_ROWS) {
      alive = false;
      return;
    }
    _results = [];
    for (columnIndex = _j = 0, _ref1 = columns - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; columnIndex = 0 <= _ref1 ? ++_j : --_j) {
      column = $(".column[data-x='" + columnIndex + "']");
      colour = COLOURS[Math.floor(Math.random() * COLOURS.length)];
      ball = $('<div />');
      ball.addClass('ball');
      ball.data('colour', colour);
      ball.addClass('new');
      ball.data('x', columnIndex);
      ball.data('y', rowIndex);
      balls[columnIndex].unshift(ball);
      _results.push(column.prepend(ball));
    }
    return _results;
  };
  for (rowIndex = _j = 0, _ref1 = INITIAL_ROWS - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; rowIndex = 0 <= _ref1 ? ++_j : --_j) {
    addRow();
  }
  NEW_ROW_INTERVAL = 5000;
  addRowOrRestartGame = function() {
    if (alive) {
      addRow();
      return setTimeout(addRowOrRestartGame, NEW_ROW_INTERVAL);
    } else {
      return initGame();
    }
  };
  setTimeout(addRowOrRestartGame, NEW_ROW_INTERVAL);
  INITIAL_CHARACTER_COLUMN = 2;
  characterColumn = null;
  moveCharacterToColumn = function(columnIndex) {
    var character;
    if (columnIndex !== characterColumn) {
      characterColumn = columnIndex;
      $(".character").remove();
      character = $('<div/>');
      character.addClass('character');
      column = $(".column[data-x='" + characterColumn + "']");
      return column.append(character);
    }
  };
  moveCharacterToColumn(INITIAL_CHARACTER_COLUMN);
  findAndDestroyBalls = function(pushedColumnIndex) {
    var ball, columnBalls, deleteToIndex, pushedColour, _k, _l, _ref2, _ref3;
    columnBalls = balls[pushedColumnIndex];
    if (columnBalls.length < 3) {
      return;
    }
    pushedColour = columnBalls[columnBalls.length - 1].data('colour');
    for (rowIndex = _k = _ref2 = columnBalls.length - 2; _ref2 <= 0 ? _k <= 0 : _k >= 0; rowIndex = _ref2 <= 0 ? ++_k : --_k) {
      if (columnBalls[rowIndex].data('colour') !== pushedColour) {
        break;
      }
    }
    if ((columnBalls.length - 1) - rowIndex >= 3) {
      deleteToIndex = rowIndex + 1;
      for (rowIndex = _l = _ref3 = columnBalls.length - 1; _ref3 <= deleteToIndex ? _l <= deleteToIndex : _l >= deleteToIndex; rowIndex = _ref3 <= deleteToIndex ? ++_l : --_l) {
        ball = columnBalls.pop();
        ball.addClass('remove');
      }
      return setTimeout(function() {
        $('.ball.remove').remove();
        return ball.remove();
      }, 300);
    }
  };
  characterBalls = [];
  pullBall = function(columnIndex) {
    var ball, columnBalls, lastPulledBall;
    columnBalls = balls[columnIndex];
    ball = columnBalls[columnBalls.length - 1];
    if (ball) {
      lastPulledBall = characterBalls[0];
      if (!lastPulledBall || lastPulledBall.data('colour') === ball.data('colour')) {
        ball = columnBalls.pop();
        ball.removeClass('new');
        ball.remove();
        return characterBalls.push(ball);
      }
    }
  };
  pushBall = function(columnIndex) {
    var ball;
    if (countRows() >= MAX_ROWS) {
      return false;
    }
    while (characterBalls.length > 0) {
      ball = characterBalls.pop();
      balls[columnIndex].push(ball);
      $(".column[data-x='" + columnIndex + "']").append(ball);
    }
    return findAndDestroyBalls(columnIndex);
  };
  window.onkeydown = function(e) {
    if (e.keyCode === 40 || e.keyCode === 38) {
      return false;
    }
  };
  return window.onkeyup = function(e) {
    if (alive) {
      e = e.keyCode;
      switch (e) {
        case 37:
          if (characterColumn > 0) {
            return moveCharacterToColumn(characterColumn - 1);
          }
          break;
        case 39:
          if (characterColumn < INITIAL_COLUMNS - 1) {
            return moveCharacterToColumn(characterColumn + 1);
          }
          break;
        case 40:
          return pullBall(characterColumn);
        case 38:
          pushBall(characterColumn);
          return false;
      }
    }
  };
};

// Generated by CoffeeScript 1.4.0
var $, Ball, Character, DomRenderComponent, Game, KeyboardInputComponent, NullInputComponent, NullRenderComponent,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = Zepto;

$(function() {
  var game;
  game = new Game({
    renderComponent: new DomRenderComponent($('#sausis')),
    inputComponent: new KeyboardInputComponent
  });
  return game.start();
});

window.requestAnimationFrame = (function() {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(f) {
    return window.setTimeout(f, 1e3 / 60);
  };
})();

NullInputComponent = (function() {

  function NullInputComponent() {}

  NullInputComponent.prototype.start = function() {
    return true;
  };

  NullInputComponent.prototype.update = function() {
    return true;
  };

  NullInputComponent.prototype.moveLeft = function() {
    return false;
  };

  NullInputComponent.prototype.moveRight = function() {
    return false;
  };

  NullInputComponent.prototype.pullBall = function() {
    return false;
  };

  NullInputComponent.prototype.pushBall = function() {
    return false;
  };

  return NullInputComponent;

})();

KeyboardInputComponent = (function(_super) {

  __extends(KeyboardInputComponent, _super);

  function KeyboardInputComponent() {
    return KeyboardInputComponent.__super__.constructor.apply(this, arguments);
  }

  KeyboardInputComponent.prototype.start = function() {
    var _this = this;
    this.keys = [];
    return window.onkeydown = function(e) {
      _this.keys[e.keyCode] = true;
      if (e.keyCode === 40 || e.keyCode === 38) {
        return false;
      }
    };
  };

  KeyboardInputComponent.prototype.update = function() {
    this.shouldMoveLeft = this.keys[37];
    this.shouldMoveRight = this.keys[39];
    this.shouldPullBall = this.keys[40];
    this.shouldPushBall = this.keys[38];
    return this.keys = [];
  };

  KeyboardInputComponent.prototype.moveLeft = function() {
    return this.shouldMoveLeft;
  };

  KeyboardInputComponent.prototype.moveRight = function() {
    return this.shouldMoveRight;
  };

  KeyboardInputComponent.prototype.pullBall = function() {
    return this.shouldPullBall;
  };

  KeyboardInputComponent.prototype.pushBall = function() {
    return this.shouldPushBall;
  };

  return KeyboardInputComponent;

})(NullInputComponent);

NullRenderComponent = (function() {

  function NullRenderComponent() {}

  NullRenderComponent.prototype.start = function() {
    return true;
  };

  NullRenderComponent.prototype.update = function() {
    return true;
  };

  NullRenderComponent.prototype.updateScore = function(score) {
    return true;
  };

  NullRenderComponent.prototype.buildGameBoard = function() {
    return true;
  };

  NullRenderComponent.prototype.buildColumn = function(columnIndex) {
    return true;
  };

  NullRenderComponent.prototype.addNewBallToColumn = function(ballObject, columnIndex) {
    return true;
  };

  NullRenderComponent.prototype.popBallFromColumn = function(ballObject, columnIndex) {
    return true;
  };

  NullRenderComponent.prototype.pushBallToColumn = function(ballObject, columnIndex) {
    return true;
  };

  NullRenderComponent.prototype.destroyBallFromColumn = function(ballObject, columnIndex) {
    return true;
  };

  NullRenderComponent.prototype.buildCharacterOnColumn = function(columnIndex) {
    return true;
  };

  NullRenderComponent.prototype.startGameLoop = function(callback) {
    var _this = this;
    return this.gameLoopTimer = setInterval(function() {
      return callback();
    }, 1e3 / 10);
  };

  NullRenderComponent.prototype.stopGameLoop = function() {
    return clearTimeout(this.gameLoopTimer);
  };

  return NullRenderComponent;

})();

DomRenderComponent = (function(_super) {
  var createElementForBall, getTimestamp;

  __extends(DomRenderComponent, _super);

  DomRenderComponent.prototype.running = false;

  function DomRenderComponent(parent) {
    this.parent = parent != null ? parent : $('body');
    this.gameLoop = __bind(this.gameLoop, this);

    true;
  }

  DomRenderComponent.prototype.start = function() {
    return this.ballsToRemove = [];
  };

  DomRenderComponent.prototype.update = function() {
    var ball, timestamp, _results;
    timestamp = getTimestamp();
    _results = [];
    while (this.ballsToRemove.length > 0 && timestamp > this.ballsToRemove[0].timestamp) {
      ball = this.ballsToRemove.shift();
      _results.push(this.removeBall(ball.id));
    }
    return _results;
  };

  DomRenderComponent.prototype.updateScore = function(score) {
    var delimeteredScore;
    delimeteredScore = ("" + score).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
    return this.board.find('.score').html(delimeteredScore);
  };

  DomRenderComponent.prototype.buildGameBoard = function() {
    var score;
    this.parent.find('.board').remove();
    this.board = $('<div/>');
    this.board.addClass('board');
    score = $('<div/>');
    score.addClass('score');
    this.board.append(score);
    return this.parent.append(this.board);
  };

  DomRenderComponent.prototype.buildColumn = function(columnIndex) {
    var column;
    column = $('<div />');
    column.addClass('column');
    column.data('x', columnIndex);
    return this.board.append(column);
  };

  DomRenderComponent.prototype.addNewBallToColumn = function(ballObject, columnIndex) {
    var ball, column;
    ball = createElementForBall(ballObject);
    ball.addClass('new');
    column = this.board.find(".column[data-x='" + columnIndex + "']");
    return column.prepend(ball);
  };

  DomRenderComponent.prototype.pushBallToColumn = function(ballObject, columnIndex) {
    var ball, column;
    ball = createElementForBall(ballObject);
    column = this.board.find(".column[data-x='" + columnIndex + "']");
    return column.append(ball);
  };

  DomRenderComponent.prototype.popBallFromColumn = function(ballObject, columnIndex) {
    return this.removeBall(ballObject.id);
  };

  DomRenderComponent.prototype.destroyBallFromColumn = function(ballObject, columnIndex) {
    var ball, column;
    column = this.board.find(".column[data-x='" + columnIndex + "']");
    ball = column.find(".ball[data-id='" + ballObject.id + "']");
    ball.addClass('remove');
    return this.removeBallInMs(ballObject.id, 300);
  };

  DomRenderComponent.prototype.buildCharacterOnColumn = function(columnIndex) {
    var character, column;
    this.board.find(".character").remove();
    character = $('<div/>');
    character.addClass('character');
    column = this.board.find(".column[data-x='" + columnIndex + "']");
    return column.append(character);
  };

  DomRenderComponent.prototype.startGameLoop = function(callback) {
    this.gameLoopCallback = callback;
    this.running = true;
    return this.gameLoop();
  };

  DomRenderComponent.prototype.stopGameLoop = function() {
    return this.running = false;
  };

  DomRenderComponent.prototype.removeBall = function(ballId) {
    var ball;
    ball = this.board.find(".ball[data-id='" + ballId + "']");
    return ball.remove();
  };

  DomRenderComponent.prototype.removeBallInMs = function(ballId, ms) {
    return this.ballsToRemove.push({
      id: ballId,
      timestamp: getTimestamp() + ms
    });
  };

  DomRenderComponent.prototype.gameLoop = function() {
    if (this.running) {
      window.requestAnimationFrame(this.gameLoop);
      return this.gameLoopCallback();
    }
  };

  createElementForBall = function(ballObject) {
    var ball;
    ball = $('<div />');
    ball.addClass('ball');
    ball.data('colour', ballObject.colour);
    return ball.data('id', ballObject.id);
  };

  getTimestamp = function() {
    return new Date().getTime();
  };

  return DomRenderComponent;

})(NullRenderComponent);

Ball = (function() {
  var colours, lastBallId, pickColour;

  colours = ['red', 'blue', 'green'];

  lastBallId = 0;

  function Ball() {
    this.id = lastBallId++;
    this.colour = pickColour();
  }

  pickColour = function() {
    return _.first(_.shuffle(colours));
  };

  return Ball;

})();

Character = (function() {

  function Character(options) {
    this.options = options;
    this.column = Math.floor(this.options.columns / 2);
    true;
  }

  Character.prototype.start = function() {
    return this.moveToColumn(this.column);
  };

  Character.prototype.moveLeft = function() {
    if (this.column > 1) {
      return this.moveToColumn(this.column - 1);
    }
  };

  Character.prototype.moveRight = function() {
    if (this.column < this.options.columns) {
      return this.moveToColumn(this.column + 1);
    }
  };

  Character.prototype.moveToColumn = function(column) {
    this.column = column;
    return this.options.renderComponent.buildCharacterOnColumn(this.column);
  };

  return Character;

})();

Game = (function() {
  var getTimestamp;

  Game.prototype.running = false;

  Game.prototype.score = 0;

  Game.prototype.defaults = {
    columns: 7,
    initialRows: 4,
    inputComponent: new NullInputComponent,
    renderComponent: new NullRenderComponent,
    newRowInterval: 5000,
    maxRows: 11
  };

  function Game(options) {
    this.options = options != null ? options : {};
    this.gameLoop = __bind(this.gameLoop, this);

    _.defaults(this.options, this.defaults);
  }

  Game.prototype.start = function() {
    this.options.inputComponent.start();
    this.options.renderComponent.start();
    this.buildGameBoard();
    this.options.renderComponent.startGameLoop(this.gameLoop);
    return this.running = true;
  };

  Game.prototype.gameLoop = function() {
    this.options.inputComponent.update();
    this.handleInput();
    this.handleTimers();
    this.options.renderComponent.updateScore(this.score);
    return this.options.renderComponent.update();
  };

  Game.prototype.buildGameBoard = function() {
    var x, y, _i, _j, _ref, _ref1;
    this.options.renderComponent.buildGameBoard();
    this.balls = [];
    this.characterBalls = [];
    for (x = _i = 1, _ref = this.options.columns; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
      this.buildColumn(x);
    }
    for (y = _j = 1, _ref1 = this.options.initialRows; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 1 <= _ref1 ? ++_j : --_j) {
      this.buildRow();
    }
    return this.buildCharacter();
  };

  Game.prototype.buildColumn = function(columnIndex) {
    this.options.renderComponent.buildColumn(columnIndex);
    return this.balls.push([]);
  };

  Game.prototype.buildRow = function() {
    var ball, x, _i, _ref;
    if (this.countRows() >= this.options.maxRows) {
      return this.triggerGameOver();
    }
    for (x = _i = 1, _ref = this.options.columns; 1 <= _ref ? _i <= _ref : _i >= _ref; x = 1 <= _ref ? ++_i : --_i) {
      ball = new Ball();
      this.balls[x - 1].unshift(ball);
      this.options.renderComponent.addNewBallToColumn(ball, x);
    }
    return this.buildNextRowAt = getTimestamp() + this.options.newRowInterval;
  };

  Game.prototype.buildCharacter = function() {
    this.character = new Character({
      renderComponent: this.options.renderComponent,
      columns: this.options.columns
    });
    return this.character.start();
  };

  Game.prototype.handleInput = function() {
    if (this.options.inputComponent.moveLeft()) {
      this.character.moveLeft();
    } else if (this.options.inputComponent.moveRight()) {
      this.character.moveRight();
    }
    if (this.options.inputComponent.pullBall()) {
      return this.pullBall(this.character.column);
    } else if (this.options.inputComponent.pushBall()) {
      return this.pushBall(this.character.column);
    }
  };

  Game.prototype.pullBall = function(x) {
    var ball, columnBalls, lastPulledBall, pulledColour, rowIndex, _i, _ref;
    columnBalls = this.balls[x - 1];
    pulledColour = columnBalls[columnBalls.length - 1].colour;
    for (rowIndex = _i = _ref = columnBalls.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; rowIndex = _ref <= 0 ? ++_i : --_i) {
      ball = columnBalls[rowIndex];
      if (ball.colour !== pulledColour) {
        return;
      }
      lastPulledBall = this.characterBalls[0];
      if (!(!lastPulledBall || lastPulledBall.colour === ball.colour)) {
        return;
      }
      ball = columnBalls.pop();
      this.options.renderComponent.popBallFromColumn(ball, x);
      this.characterBalls.push(ball);
    }
  };

  Game.prototype.pushBall = function(x) {
    var ball, columnBalls;
    columnBalls = this.balls[x - 1];
    while (this.characterBalls.length > 0) {
      ball = this.characterBalls.pop();
      columnBalls.push(ball);
      this.options.renderComponent.pushBallToColumn(ball, x);
    }
    return this.findAndDestroyBalls(x);
  };

  Game.prototype.findAndDestroyBalls = function(x) {
    var ball, columnBalls, deleteToIndex, pushedColour, pushedColumnIndex, rowIndex, scoreForMove, searched, toDelete, toSearch, tupleExists, y, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3;
    pushedColumnIndex = x - 1;
    columnBalls = this.balls[pushedColumnIndex];
    if (columnBalls.length < 3) {
      return;
    }
    pushedColour = columnBalls[columnBalls.length - 1].colour;
    for (rowIndex = _i = _ref = columnBalls.length - 2; _ref <= 0 ? _i <= 0 : _i >= 0; rowIndex = _ref <= 0 ? ++_i : --_i) {
      if (columnBalls[rowIndex].colour !== pushedColour) {
        break;
      }
    }
    if ((columnBalls.length - 1) - rowIndex >= 3) {
      deleteToIndex = rowIndex + 1;
      searched = [];
      toSearch = [];
      toDelete = [];
      for (rowIndex = _j = _ref1 = columnBalls.length - 1; _ref1 <= deleteToIndex ? _j <= deleteToIndex : _j >= deleteToIndex; rowIndex = _ref1 <= deleteToIndex ? ++_j : --_j) {
        toSearch.push([pushedColumnIndex, rowIndex]);
      }
      tupleExists = function(tuple, array) {
        var ax, ay, i, y, _k, _len, _ref2;
        x = tuple[0], y = tuple[1];
        for (i = _k = 0, _len = array.length; _k < _len; i = ++_k) {
          _ref2 = array[i], ax = _ref2[0], ay = _ref2[1];
          if (ax === x && ay === y) {
            return true;
          }
        }
        return false;
      };
      while (toSearch.length > 0) {
        _ref2 = toSearch.shift(), x = _ref2[0], y = _ref2[1];
        if (tupleExists([x, y], searched)) {
          continue;
        }
        searched.push([x, y]);
        if (!this.balls[x] || !this.balls[x][y]) {
          continue;
        }
        if (this.balls[x][y].colour !== pushedColour) {
          continue;
        }
        toDelete.push([x, y]);
        toSearch.push([x + 1, y]);
        toSearch.push([x - 1, y]);
        toSearch.push([x, y + 1]);
        toSearch.push([x, y - 1]);
      }
      scoreForMove = 0;
      for (_k = 0, _len = toDelete.length; _k < _len; _k++) {
        _ref3 = toDelete[_k], x = _ref3[0], y = _ref3[1];
        ball = this.balls[x][y];
        scoreForMove += 10;
        this.balls[x].splice(y, 1);
        this.options.renderComponent.destroyBallFromColumn(ball, x + 1);
      }
      return this.score += scoreForMove;
    }
  };

  Game.prototype.handleTimers = function() {
    var timestamp;
    timestamp = getTimestamp();
    if (timestamp > this.buildNextRowAt) {
      return this.buildRow();
    }
  };

  Game.prototype.countRows = function() {
    var columnBalls, rows, _i, _len, _ref;
    rows = 0;
    _ref = this.balls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      columnBalls = _ref[_i];
      if (columnBalls.length > rows) {
        rows = columnBalls.length;
      }
    }
    return rows;
  };

  Game.prototype.triggerGameOver = function() {
    this.running = false;
    return this.options.renderComponent.stopGameLoop();
  };

  getTimestamp = function() {
    return new Date().getTime();
  };

  return Game;

})();
